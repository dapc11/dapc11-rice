#!/usr/bin/python3

import argparse
import getpass
import os
import sys
import glob
from pathlib import Path
from shutil import copyfile
from distutils.dir_util import copy_tree
import subprocess

import jinja2
from lib import utils


class Ricer:
    EXECUTABLE = True

    def __init__(self, args):
        self.user = getpass.getuser()
        self.overwrite = args.overwrite
        if self.overwrite:
            self.target = f'/home/{self.user}/.config'
        else:
            self.target = f'{os.getcwd()}/target'
        self.env = jinja2.Environment(
            loader=jinja2.FileSystemLoader(searchpath="./templates/"))
        self.context = utils.get_context(args.theme)

    def _get_destination(self, template):
        dest = f'{self.target}/{template}'
        parent = Path(dest).parent
        if not os.path.exists(parent):
            os.makedirs(parent)
        return dest

    def set_target_dir(self, target):
        if self.overwrite:
            self.target = target

    def render_template(self, template, executable=False):
        dest = self._get_destination(template)
        environment_template = self.env.get_template(template)

        print(f'Writing to {dest}')
        with open(dest, 'w') as destination_file:
            destination_file.write(environment_template.render(self.context))
        if executable:
            utils.make_executable(dest)

    def copy_file(self, source, target):
        if not self.overwrite:
            basename = os.path.basename(source)
            target = f"{self.target}/{basename}"
        print(f'Copying {source} to {target}')
        if os.path.isdir(source):
            copy_tree(source, target)
        else:
            copyfile(source, target)


def setup_argparser():
    arg_parser = argparse.ArgumentParser(
        prog='rice_it',
        description='Dapc ricer, make your environment consistent from a color perspective.'
    )
    arg_parser.add_argument(
        '--overwrite',
        '-o',
        help='Make rice_it overwrite existing dotfiles in your home directory, use with caution!',
        action='store_true')
    arg_parser.add_argument(
        '-t',
        '--theme',
        action='store',
        dest='theme',
        help='Specify which theme the context will be loaded from.'
    )
    arg_parser.add_argument(
        '-l',
        '--list',
        action='store_true',
        help='List available themes'
    )
    return arg_parser


def get_themes():
    theme_names = []
    for theme_path in glob.glob('themes/*.json'):
        if 'settings' in theme_path:
            continue
        theme_names.append(os.path.splitext(os.path.basename(theme_path))[0])
    return theme_names


def main():
    parser = setup_argparser()
    themes = get_themes()
    args = parser.parse_args()
    if args.list or args.theme is None:
        print('Specify theme with --theme (-t) flag.\nAvailable themes:')
        for theme in themes:
            print(f'- {theme}')
        sys.exit(0)

    ricer = Ricer(args)

    render_vim(ricer)
    render_rofi(ricer)
    if ricer.context['window_manager'] == 'awesome':
        render_awesome(ricer)
    else:
        ricer.render_template('i3/config')
        render_background(ricer)
        render_polybar(ricer)
    render_vs_code(ricer)
    ricer.render_template('alacritty/alacritty.yml')
    ricer.render_template('dunst/dunstrc')
    ricer.render_template('ranger/rc.conf')
    ricer.render_template('yamllint/config')
    ricer.render_template('compton/compton.conf')
    ricer.set_target_dir(f'/home/{ricer.user}')
    ricer.render_template('.tmux.conf')
    ricer.render_template('.zshrc')
    ricer.render_template('.xprofile')
    ricer.render_template('.zprofile')
    ricer.render_template('.Xresources')
    render_utils(ricer)
    sys.exit(0)


def render_vim(ricer):
    ricer.render_template('nvim/init.vim')
    ricer.render_template('nvim/mappings.vim')
    ricer.render_template('nvim/plugins.vim')
    ricer.render_template('nvim/statusline.vim')
    ricer.render_template('nvim/fzf.vim')
    ricer.render_template('nvim/options.vim')
    ricer.render_template('nvim/dapc11.vim')


def render_awesome(ricer):
    ricer.render_template('awesome/rc.lua')
    ricer.render_template('awesome/theme.lua')
    ricer.copy_file(f"templates/awesome/sysact",
                    f'/home/{ricer.user}/.local/bin/sysact')
    ricer.make_executable(f'/home/{ricer.user}/.local/bin/sysact')
    background = ricer.context['bg']
    ricer.copy_file(f"templates/images/{background}",
                    f'/home/{ricer.user}/.config/awesome/background.jpg')
    ricer.copy_file('templates/awesome/widgets',
                    f'/home/{ricer.user}/.config/awesome/widgets')
    ricer.copy_file('templates/awesome/icons',
                    f'/home/{ricer.user}/.config/awesome/icons')


def render_background(ricer):
    background = ricer.context['bg']
    ricer.copy_file(f"templates/images/{background}",
                    f'/home/{ricer.user}/.local/background.jpg')
    if ricer.overwrite:
        subprocess.run(['feh',
                        '--bg-fill',
                        f'/home/{ricer.user}/.local/background.jpg'],
                       check=True)


def render_vs_code(ricer):
    ricer.render_template('Code/User/settings.json')
    ricer.render_template('Code/User/keybindings.json')


def render_rofi(ricer):
    ricer.render_template('rofi/config.rasi')
    ricer.render_template('rofi/powermenu.rasi')
    ricer.render_template('rofi/rofi-power', Ricer.EXECUTABLE)
    ricer.render_template('rofi/rofi-randr', Ricer.EXECUTABLE)


def render_polybar(ricer):
    ricer.render_template('polybar/config')
    ricer.render_template('polybar/startup.sh', Ricer.EXECUTABLE)
    ricer.render_template('polybar/updates.sh', Ricer.EXECUTABLE)
    ricer.render_template('polybar/now_playing.py', Ricer.EXECUTABLE)
    ricer.render_template('polybar/weather.sh', Ricer.EXECUTABLE)


def render_utils(ricer):
    ricer.set_target_dir(f'/home/{ricer.user}/.local')
    ricer.render_template('bin/dimmer', Ricer.EXECUTABLE)
    ricer.render_template('bin/nightmode', Ricer.EXECUTABLE)
    ricer.render_template('bin/gita', Ricer.EXECUTABLE)


if __name__ == "__main__":
    main()
