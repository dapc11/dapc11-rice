#!/usr/bin/python3

import argparse
import getpass
import json
import os
import subprocess
import sys
from pathlib import Path

import jinja2


class Ricer:
    def __init__(self, args):
        self.should_overwrite = args.overwrite
        self.theme = args.theme

        template_loader = jinja2.FileSystemLoader(searchpath="./templates/")
        self.env = jinja2.Environment(loader=template_loader)
        self.context = self._get_context()

    def _get_context(self):
        with open(self.theme, 'r') as context:
            print("Using context: '{}'".format(os.path.abspath(self.theme)))
            return json.load(context)

    def _get_destination(self, template, target):
        if self.should_overwrite:
            return Path(target.format(getpass.getuser(), template))
        return Path('output/{0}'.format(template))

    def render_template(self, template, target='/home/{0}/.config/{1}/', binary=False):
        destination = self._get_destination(template, target)
        if not os.path.exists(destination.parent):
            os.makedirs(destination.parent)

        environment_template = self.env.get_template(template)

        print('Writing to {0}'.format(destination))
        with open(destination, 'w') as destination_file:
            destination_file.write(environment_template.render(self.context))
            if binary:
                mode = os.stat(destination).st_mode
                mode |= (mode & 0o444) >> 2  # copy R bits to X
                os.chmod(destination, mode)

    def put_background(self):
        try:
            subprocess.check_output(
                "nitrogen --force-setter=xinerama  --set-auto templates/images/{0}".format(self.context['bg']),
                shell=True)
            print('Background updated.')
        except subprocess.CalledProcessError:
            print('Could not set background.')


def setup_argparser():
    arg_parser = argparse.ArgumentParser(
        prog='rice_it',
        description='Dapc ricer, make your environment consistent from a color perspective.'
    )
    arg_parser.add_argument(
        '--overwrite',
        '-o',
        help='Make rice_it overwrite existing dotfiles in your home directory, use with caution!',
        action='store_true')
    arg_parser.add_argument(
        '-t',
        '--theme',
        action='store',
        dest='theme',
        default='themes/dark.json',
        help='Specify which theme the context will be loaded from. Defaults to dark.json'
    )
    return arg_parser


def main():
    parser = setup_argparser()
    ricer = Ricer(parser.parse_args())
    ricer.render_template('alacritty/alacritty.yml')
    ricer.render_template('dunst/dunstrc')
    ricer.render_template('i3/config')
    ricer.render_template('ranger/rc.conf')
    ricer.render_template('compton/compton.conf')
    ricer.render_template('.tmux.conf', '/home/{0}/{1}')
    ricer.render_template('.zshrc', '/home/{0}/{1}')
    ricer.render_template('.xprofile', '/home/{0}/{1}')
    ricer.render_template('.zprofile', '/home/{0}/{1}')
    ricer.render_template('.Xresources', '/home/{0}/{1}')
    render_rofi(ricer)
    render_polybar(ricer)
    render_vs_code(ricer)
    render_vim(ricer)
    render_utils(ricer)
    ricer.put_background()
    sys.exit(0)


def render_vim(ricer):
    ricer.render_template('nvim/init.vim')
    ricer.render_template('.vimrc', '/home/{0}/{1}')


def render_vs_code(ricer):
    ricer.render_template('Code/User/settings.json')
    ricer.render_template('Code/User/keybindings.json')


def render_rofi(ricer):
    ricer.render_template('rofi/config.rasi')
    ricer.render_template('rofi/powermenu.rasi')
    ricer.render_template('rofi/powermenu.sh', '/home/{0}/.local/bin/sysact', True)


def render_polybar(ricer):
    ricer.render_template('polybar/config')
    ricer.render_template('polybar/startup.sh', '/home/{0}/.config/polybar/startup.sh', True)
    ricer.render_template('polybar/updates.sh', '/home/{0}/.config/polybar/updates.sh', True)
    ricer.render_template('polybar/now_playing.py', '/home/{0}/.config/polybar/now_playing.py', True)


def render_utils(ricer):
    ricer.render_template('utils/dimmer', '/home/{0}/.local/bin/dimmer', True)
    ricer.render_template('utils/nightmode', '/home/{0}/.local/bin/nightmode', True)
    ricer.render_template('utils/gita', '/home/{0}/.local/bin/gita', True)
    ricer.render_template('utils/rofi-randr', '/home/{0}/.local/bin/rofi-randr', True)


if __name__ == "__main__":
    main()
